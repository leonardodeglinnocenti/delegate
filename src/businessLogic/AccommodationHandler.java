package businessLogic;

import dao.ApartmentDAO;
import dao.RoomDAO;
import domainModel.Accommodation;
import domainModel.Apartment;
import domainModel.Room;

import java.util.ArrayList;

public class AccommodationHandler {
    // This method helps the user create a new accommodation, passing in input whether it is a room or an apartment
    // This class is a singleton
    private static AccommodationHandler instance = null;
    private final ApartmentDAO apartmentDAO;
    private final RoomDAO roomDAO;

    private AccommodationHandler(ApartmentDAO apartmentDAO, RoomDAO roomDAO) {
        this.apartmentDAO = apartmentDAO;
        this.roomDAO = roomDAO;
    }

    public static AccommodationHandler getInstance(ApartmentDAO apartmentDAO, RoomDAO roomDAO) {
        if (instance == null) {
            instance = new AccommodationHandler(apartmentDAO, roomDAO);
        }
        return instance;
    }

    public Accommodation createAccommodation(String type, String description, int maxGuestsAllowed) {
        if (type.equals("apartment")) {
            // id will be automatically generated by the database
            Apartment apartment = new Apartment(-1, description, maxGuestsAllowed);
            try {
                apartmentDAO.insert(apartment);
            } catch (Exception e) {
                System.err.println("ERROR: Could not insert apartment.");
                return null;
            }
            // the insert method automatically sets the id of the apartment
            return apartment;
        } else if (type.equals("room")) {
            Room room = new Room(-1, description, maxGuestsAllowed);
            try {
                roomDAO.insert(room);
            } catch (Exception e) {
                System.err.println("ERROR: Could not insert room.");
                return null;
            }
            // the insert method automatically sets the id of the room
            return room;
        } else {
            System.err.println("ERROR: Invalid accommodation type.");
            return null;
        }
    }

    public boolean deleteAccommodation(Accommodation accommodation) {
        // Check if the given id is referred to an apartment or a room (each is unique)
        int id = accommodation.getId();
        try {
            if(apartmentDAO.delete(id)) {
                return true;
            } else if(roomDAO.delete(id)) {
                return true;
            }
        } catch (Exception e) {
            System.err.println("ERROR: Something went wrong with the database and the accommodation could not be deleted.");
            return false;
        }
        System.err.println("ERROR: Something went wrong with the given accommodation and it could not be deleted.");
        return false;
    }

    public ArrayList<Apartment> getAllApartments() {
        ArrayList<Apartment> apartments;
        try {
            apartments = new ArrayList<>(apartmentDAO.getAll());
        } catch (Exception e) {
            System.err.println("ERROR: Could not get all accommodations.");
            return null;
        }
        return apartments;
    }

    public ArrayList<Room> getAllRooms() {
        ArrayList<Room> rooms;
        try {
            rooms = new ArrayList<>(roomDAO.getAll());
        } catch (Exception e) {
            System.err.println("ERROR: Could not get all accommodations.");
            return null;
        }
        return rooms;
    }

    public Accommodation getAccommodationById(int id) {
        Accommodation accommodation;
        try {
            accommodation = apartmentDAO.get(id);
            if (accommodation == null) {
                accommodation = roomDAO.get(id);
            }
            if (accommodation == null) {
                System.err.println("ERROR: Accommodation not found.");
            }
        } catch (Exception e) {
            System.err.println("ERROR: Could not get accommodation.");
            return null;
        }
        return accommodation;
    }

    public Apartment addApartmentDetails(Accommodation accommodation, int numberOfRooms, int numberOfBathrooms, int numberOfBedrooms, int numberOfBeds) {
        if (accommodation == null) {
            System.err.println("ERROR: Could not get apartment.");
            return null;
        }
        Apartment apartment = (Apartment) accommodation;
        apartment.setNumberOfRooms(numberOfRooms);
        apartment.setNumberOfBathrooms(numberOfBathrooms);
        apartment.setNumberOfBedrooms(numberOfBedrooms);
        apartment.setNumberOfBeds(numberOfBeds);
        try {
            apartmentDAO.update(apartment);
        } catch (Exception e) {
            System.err.println("ERROR: Could not update apartment.");
            return null;
        }
        return apartment;
    }

    public Room addRoomDetails(Accommodation accommodation, boolean hasPrivateBathroom, boolean hasKitchen) {
        if (accommodation == null) {
            System.err.println("ERROR: Could not get room.");
            return null;
        }
        Room room = (Room) accommodation;
        room.setHasPrivateBathroom(hasPrivateBathroom);
        room.setHasKitchen(hasKitchen);
        try {
            roomDAO.update(room);
        } catch (Exception e) {
            System.err.println("ERROR: Could not update room.");
            return null;
        }
        return room;
    }
}
